---
title: "What do we actually mean by increased/decreased inpatient LoS?"
author: "(When a mean doesn't mean what you think it means 2)"
format: 
    revealjs:
        css: slides.css
---
```{python}
#| label: library-imports
import pandas as pd
import numpy as np
import sys
import os
root_dir = os.path.abspath(os.path.join(os.getcwd(), '..'))
sys.path.append(root_dir)
import plotly.express as px
import plotly.graph_objects as go
import distribution_functions
from plotly.subplots import make_subplots
from IPython.display import display

```
## Model recap
![](../app/img/model_diagram.png)

## Model recap
![](docs_img/input_sliders.png)


## This is our real LoS distribution 

```{python}
csv = pd.read_csv("../data/los_fy2425.csv")
binsize = [5, 24]
colours='#636EFA'

# Create a subplot with 1 row and 2 columns
fig = make_subplots(rows=2, cols=1, subplot_titles=[f'Binsize: {binsize[0]} hrs', f'Binsize: {binsize[1]} hrs'])

for i in range(len(binsize)):
    hist = go.Histogram(
        x=csv['LoSHrs'],
        #name=f'Real {binsize[i]} hrs',
        xbins=dict(start=0, end=2000, size=binsize[i]),
        marker_color=colours
        )
    fig.add_trace(hist, row=i+1, col=1)

fig.update_xaxes(range=[0, 2000])
fig.update_layout(
    # title={
    #     'text': 'Real Inpatient LoS Distribution (FY 24/25)',
    #     'x': 0.5,
    #     'y': 0.99,
    #     'xanchor': 'center',
    #     'yanchor':'top'
    # },
    xaxis_title='Hours',
    yaxis_title='Count',
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in fig['layout']['annotations']:
    if 'Binsize' in annotation['text']:
        annotation['y'] -= 0.05  # Adjust as necessary

fig.show()

summary=distribution_functions.samples_to_summary_list(csv['LoSHrs'])
summary=[summary]
summary_table=distribution_functions.summary_lists_to_table(summary)
summary_table=summary_table.rename(columns={'LoS Dist -1':'Real LoS'})
summary_table.set_index('Metric', inplace=True)
```



## Do we not just change mean LoS?

:::: {.columns}

::: {.column width="60%"}
```{python}
mean = 210
mean_list1 = [mean, mean, mean]
std_list1=[200, 350, 750]
fig_list3, list_of_summary_lists3=distribution_functions.visualise_lognormal_hist_list(mean_list1, std_list1, 20000, 5)

combined_fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=("Dist 0", "Dist 1", "Dist 2"),
)

for i in range(len(fig_list3)):
    combined_fig.add_trace(fig_list3[i].data[0], row=i+1, col=1)

combined_fig.update_xaxes(range=[0, 1000])

combined_fig.update_layout(
    # title={
    #     'text': 'Same mean, very different distributions',
    #     'x': 0.5,
    #     'y': 0.99,
    #     'xanchor': 'center',
    #     'yanchor':'top'
    # },
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```
:::

::: {.column width="40%"}
```{python}
summary_table1=distribution_functions.summary_lists_to_table(list_of_summary_lists3)
#summary_table1=summary_table1.columns = ['LoS Dist 0', 'LoS Dist 1', 'LoS Dist 2']
summary_table1.set_index('Metric', inplace=True)
summary_table1.columns = ['LoS Dist 0', 'LoS Dist 1', 'LoS Dist 2']

styled_table = summary_table1.style.set_table_attributes('style="width:100%; font-size: 1.0em;"')
display(styled_table)
```
:::

::::

## Do we not just change mean LoS?

:::: {.columns}

::: {.column width="50%"}
```{python}
mean = 210
mean_list1 = [210, 180, 150]
std_list1=[280, 180, 30]
fig_list3, list_of_summary_lists3=distribution_functions.visualise_lognormal_hist_list(mean_list1, std_list1, 20000, 5)

combined_fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=("Dist 0", "Dist 1", "Dist 2"),
    shared_xaxes=True
)

for i in range(len(fig_list3)):
    combined_fig.add_trace(fig_list3[i].data[0], row=i+1, col=1)

combined_fig.update_xaxes(range=[0, 1000])

combined_fig.update_layout(
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```
:::

::: {.column width="50%"}
```{python}
summary_table1=distribution_functions.summary_lists_to_table(list_of_summary_lists3)
#summary_table1=summary_table1.columns = ['LoS Dist 0', 'LoS Dist 1', 'LoS Dist 2']
summary_table1.set_index('Metric', inplace=True)
summary_table1.columns = ['LoS Dist 0', 'LoS Dist 1', 'LoS Dist 2']

styled_table = summary_table1.style.set_table_attributes('style="width:100%; font-size:1.0em;"')
display(styled_table)
```
:::

::::

## Two kinds of plot - probability density
:::: {.columns}

::: {.column width="60%"}
```{python}
mean=210
std=355

fig, df=distribution_functions.visualise_lognormal(mean, std)

fig.update_layout(
    template='plotly_white'
)
fig.show()

```
:::

::: {.column width="40%"}
![](docs_img/model_code.png)
:::

::::


## Two kinds of plot - histogram

:::: {.columns}

::: {.column width="60%"}
```{python}

fig_list, list_of_summary_lists=distribution_functions.visualise_lognormal_hist_list(mean, 
std, 
20000, 
5)

fig_list[0].update_xaxes(range=[0, 1000])

fig_list[0].update_layout(
    template='plotly_white'
)

fig_list[0].show()

```
:::

::: {.column width="40%"}
![](model_code.png)
:::

::::

## Normal distribution

- Variable(e.g LoS) is symmetrical and bell-shaped around the mean
- Simple relationship with mean and standard deviation
- Mean – moves bell curve left and right
- St deviation – makes it more or less pointy
- If everything was normally distributed our lives might be much more simple

## Normal distribution
:::: {.columns}

::: {.column width="50%"}
```{python}
mean_list = [200, 250, 300]
std_list=[50, 50, 50]
fig_list, list_of_summary_lists=distribution_functions.visualise_normal_hist_list(mean_list, std_list, 20000, 5)

subplot_titles=[]

for i in range(len(mean_list)):
    title=f"Mean {i}"
    subplot_titles.append(title)

combined_fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=subplot_titles,
    shared_xaxes=True
)

for i in range(len(fig_list)):
    combined_fig.add_trace(fig_list[i].data[0], row=i+1, col=1)

combined_fig.update_xaxes(range=[-100, 800])

combined_fig.update_layout(
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```
:::

::: {.column width="50%"}
```{python}
mean_list = [250, 250, 250]
std_list=[25, 50, 100]
fig_list, list_of_summary_lists=distribution_functions.visualise_normal_hist_list(mean_list, std_list, 20000, 5)

subplot_titles=[]

for i in range(len(std_list)):
    title=f"Std {i}"
    subplot_titles.append(title)

combined_fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=subplot_titles,
    shared_xaxes=True
)

for i in range(len(fig_list)):
    combined_fig.add_trace(fig_list[i].data[0], row=i+1, col=1)

combined_fig.update_xaxes(range=[-100, 800])

combined_fig.update_layout(
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```
:::

::::


## Lognormal distribution

- Log(Variable) is normally distributed
- Relationship of shape with sample mean/std is no longer simple, and a bit counter intuitive
- Increasing samplestd now makes peak pointier and changes peak position
- Changing the sample mean also changes shape and position of the peak

## Lognormal distribution figs

:::: {.columns}

::: {.column width="50%"}
```{python}
mean = 210
mean_list1 = [mean, mean, mean]
std_list1=[200, 350, 750]
fig_list3, list_of_summary_lists3=distribution_functions.visualise_lognormal_hist_list(mean_list1, std_list1, 20000, 5)

combined_fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=("STD 200", "STD 350", "STD 750"),
)

for i in range(len(fig_list3)):
    combined_fig.add_trace(fig_list3[i].data[0], row=i+1, col=1)

combined_fig.update_layout(
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```
:::

::: {.column width="50%"}
```{python}
mean = 210
mean_list1 = [300, 250, 200]
std_list1=[350, 350, 350]
fig_list3, list_of_summary_lists3=distribution_functions.visualise_lognormal_hist_list(mean_list1, std_list1, 20000, 5)

combined_fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=("Mean 300", "Mean 250", "Mean 200"),
)

for i in range(len(fig_list3)):
    combined_fig.add_trace(fig_list3[i].data[0], row=i+1, col=1)

combined_fig.update_layout(
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```
:::

::::

## This forces us to think about what we actually mean by increased/decreased length of stay

:::: {.columns}

::: {.column width="50%"}
```{python}
mean=210
std=355

fig, df=distribution_functions.visualise_lognormal(mean, std)

fig.update_layout(
    template='plotly_white'
)
fig.show()

```
:::

::: {.column width="50%"}
- Peak stays in approx the same place
- Thickness/thiness of tail changes
- Instead of using my sample mean/std to set distribution, use sample mode and 
    thickness parameter to derive sequence of means/std
:::

::::

## Sequence of probability distributions I generated

```{python}
mode=16
traces=20
mean_list, std_list = distribution_functions.make_lognormal_lists(mode, traces)

fig, df=distribution_functions.visualise_lognormal(mean_list, std_list)

for i in range(traces):
    trace=fig.data[i]
    trace.name=f'Dist{i}'

fig.update_layout(
    template='plotly_white',
    showlegend=True,
    title_text='20 Probability Density functions with increasing tail thickness'
)
fig.show()
```

## It fits our data better than original method

```{python}
mean = summary_table.loc['mean', 'Real LoS']
std = summary_table.loc['std', 'Real LoS']
fig_list1, list_of_summary_lists1=distribution_functions.hist_compare_real_model("../data/los_fy2425.csv", mean, std, 5)
fig1=fig_list1[0]

mode=16
mean_list, std_list = distribution_functions.make_lognormal_lists(mode, 20)
fig_list2, list_of_summary_lists2=distribution_functions.hist_compare_real_model("../data/los_fy2425.csv", mean_list, std_list, 5)
fig2=fig_list2[12]

# This cell makes a combined plot of 2 modelling attempts
combined_fig = make_subplots(
    rows=2, cols=1,
    subplot_titles=("Matched Mean/Std", "Matched Mode/Tail - better fit?"),
)

color_map = {
    "Real": "#636EFA",
    "Modelled": "#FF1493"
}

legend_labels_added = set()

# Helper function to clone a trace with enforced color
def copy_trace_with_color(trace, row, col):
    trace_copy = trace.__class__(**trace.to_plotly_json())
    trace_copy.marker.color = color_map.get(trace.name, trace.marker.color)
    if trace.name in legend_labels_added:
        trace_copy.showlegend = False
    else:
        legend_labels_added.add(trace.name)
    combined_fig.add_trace(trace_copy, row=row, col=col)

# Add fig1 traces to subplot 1
for trace in fig1.data:
    copy_trace_with_color(trace, row=1, col=1)

# Add fig2 traces to subplot 2
for trace in fig2.data:
    copy_trace_with_color(trace, row=2, col=1)

combined_fig.update_layout(
    title_text="Real vs Modelled Data (2 methods for modelling)",
    legend_title_text="Legend",
    template='plotly_white',
    showlegend=True
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Matched' in annotation['text']:
        annotation['y'] -= 0.05  # Adjust as necessary

combined_fig.show()
```

## Have turned LoS into a single parameter that can be increased/decreased in app/scenarios

```{python}
# Comparison - 12 plots central scenario, thick tail, thin tail
mode=16
mean_list, std_list = distribution_functions.make_lognormal_lists(mode, 20)
fig_list, list_of_summary_lists=distribution_functions.visualise_lognormal_hist_list(mean_list, std_list, 20000, 5)

subplot_titles=[]

for i in range(len(fig_list)):
    title=f"Dist {i}"
    subplot_titles.append(title)

combined_fig = make_subplots(
    rows=5, cols=4,
    subplot_titles=subplot_titles
)

for i in range(len(fig_list)):
    trace = fig_list[i].data[0]
    trace.marker.color = '#636EFA'

for i in range(len(fig_list)):
    combined_fig.add_trace(fig_list[i].data[0], row=i // 4 + 1, col=i % 4 + 1)

combined_fig.update_layout(
    title={
        'text': '20 Distributions with increasing LoS (20,000 samples)',
        'x': 0.5,
        'y': 0.99,
        'xanchor': 'center',
        'yanchor':'top'
    },
    #legend_title_text="Legend",
    template='plotly_white',
    showlegend=False
)

# Adjust subplot title positions to prevent overlap with main title
for annotation in combined_fig['layout']['annotations']:
    if 'Dist' in annotation['text']:
        annotation['y'] -= 0.025  # Adjust as necessary

combined_fig.show()
```

## Why am I telling you this?

- I found it difficult
- I want to know if you think I made the right assumptions
- Useful to think about for future simulation projects
- Also learned quite alot about distributions / plotly / quarto in the process